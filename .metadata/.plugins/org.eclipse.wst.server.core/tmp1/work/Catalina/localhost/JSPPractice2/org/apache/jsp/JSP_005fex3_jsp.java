/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-01-07 15:42:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public final class JSP_005fex3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletResponse");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title> 기본 객체 소개 </title>\r\n");
      out.write("</head>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\"> </link>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"info\">\r\n");
      out.write("<p> JSP 내장 객체에 대해 알아보자 </p>\r\n");
      out.write("<p> JSP 파일 내에 객체를 생성하지 않고도 바로 사용할 수 있는 객체야. </p>\r\n");
      out.write("<div> 브라우저가 WAS 에게 Servlet 요청을 보내면  </div>\r\n");
      out.write("<div> WAS 는 아래 두 객체를 생성해 </div>\r\n");
      out.write("<hr/>\r\n");
      out.write("<div class=\"point\"> HttpServletRequest </div>\r\n");
      out.write("<div> http 의 request  정보를 서블릿에게 전달하기 위해 사용 </div>\r\n");
      out.write("<div class=\"point\"> HttpServletResponse </div>\r\n");
      out.write("<div> 생성되어 서블릿에게 전달되고 이 객체를 통해 응답메세지를 보냄</div>\r\n");
      out.write("<div> 위 객체들 말고도 다양한 객체들이 존재해 </div>\r\n");
      out.write("<div class='point'> out | session | application | pageContext.. 등등 </div>\r\n");
      out.write("<div> 모든 객체들은 주요 메서드들이 있는데 알아두는게 좋다! </div>\r\n");
      out.write("<hr/> \r\n");
      out.write("<div> [기본객체 생명주기] </div>\r\n");
      out.write("<div>page 하나의 JSP 페이지 처리 => pageContext</div>\r\n");
      out.write("<div>request 요청영역마다 생성되고 (HTTP 요청) => request</div>\r\n");
      out.write("<div>session  브라우저별로 생성되고 => session</div>\r\n");
      out.write("<div>application프로그램 전체에서 딱 한번 최초 가동시 생성됩니다 => application</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--  원래는 최산단에 위치하는게 맞다. 하지만 설명을 위해 여기에 두겠음 -->\r\n");

	String name = request.getParameter("name");
	out.println("<div> 파라미터에서 가져온 name 값 " + name + "</div>");
	
    // 클라이언트의 IP 주소를 출력
    String clientIp = request.getRemoteAddr();
    out.println("<div> Client IP: " + clientIp + "</div>");

    // 요청 헤더 정보를 출력
    String userAgent = request.getHeader("User-Agent");
    out.println("<div> User-Agent: " + userAgent  + "</div>");

    // 세션 정보 출력
    String sessionId = request.getSession().getId();
    out.println("<div> Session ID: " + sessionId  + "</div>");
    
    // HTTP 요청 메서드 확인
    String method = request.getMethod();

    // 요청 메서드 출력
    out.println("<div> Request Method: " + method  + "</div>");
    
   

      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr/>\r\n");
      out.write(" ");

 //JSP에서 클라이언트(웹 브라우저)로 데이터를 출력하는 스트림
      String message = "Hello, JSP!";
      // out 객체를 사용하여 클라이언트(브라우저)로 출력
      out.println("<p>" + message + "</p>");
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<div> 요즘에는 EL 또는 JSTL 과 같은 방식으로 출력되는 것이 권장 됨! </div>\r\n");
      out.write("<hr/>\r\n");
      out.write("\r\n");
  
    // 리디렉션을 통해 다른 URL로 이동
    //response.sendRedirect("링크");
	//  주로 로그인 성공 후 or 폼 제출 후 다른페이지 이동 시 사용됨


      out.write("\r\n");
      out.write("\r\n");
      out.write("<button type=\"button\" class=\"btn1\"  onclick = \"location.href='index.jsp'\"> < 뒤로가기 </button>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
